name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, reopened, synchronize, labeled, unlabeled ]
jobs:
  test:
    name: Build and Test
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        include:
          - os: ubuntu-latest
            os-name: "Linux"

          - os: macos-latest
            os-name: "Mac"

          - os: windows-latest
            os-name: "Windows"
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 15
        uses: actions/setup-java@v1
        with:
          java-version: 15

      - name: Grant execute permission for gradlew
        run: |
          chmod +x gradlew
          chmod +x test-action/gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-test-gradle-${{ hashFiles('**/settings.gradle*', 'buildSrc/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-test-gradle-
            ${{ runner.os }}-publish-gradle-

      - name: Setup ENV Posix
        if: runner.os != 'Windows'
        run: |
          echo "TEST_ENV_testCwd=$(pwd)" | tee -a $GITHUB_ENV
          echo "TEST_ENV_userHome=$HOME" | tee -a $GITHUB_ENV

      - name: Setup ENV Windows
        if: runner.os == 'Windows'
        run: |
          echo "TEST_ENV_testCwd=$(pwd)" | tee -a $env:GITHUB_ENV
          echo "TEST_ENV_userHome=$HOME" | tee -a $env:GITHUB_ENV

      - name: Build and Test
        env:
          TEST_ENV_os: ${{ matrix.os-name }}
          RUNNER_DEBUG: 1
        run: ./gradlew check

      - name: Build test action
        run: (cd test-action && ./gradlew assemble)

      - name: Run test action
        uses: ./.github/actions/test-action
        env:
          RUNNER_DEBUG: 1
          test-env: test2
        with:
          required-input: required-test
          multiline: |
            test1
            test2

      - name: Stop gradle daemon
        run: ./gradlew --stop

      - name: Cleanup Gradle Cache Posix
        if: runner.os != 'Windows'
        run: |
          jps
          rm -f ~/.gradle/caches/*/*.lock
          rm -f ~/.gradle/caches/*/gc.properties

      - name: Cleanup Gradle Cache Windows
        if: runner.os == 'Windows'
        run: |
          jps
          rm -fo ~/.gradle/caches/*/*.lock
          rm -fo ~/.gradle/caches/*/gc.properties

      - name: Archive test report
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: test-report-${{ runner.os }}
          path: "**/build/reports/tests/**"


  find-version:
    runs-on: ubuntu-latest
    outputs:
      snapshot: ${{ (endsWith(steps.get_version.outputs.match, 'SNAPSHOT') || endsWith(steps.get_version.outputs.match, 'snapshot')) }}
      version: ${{ steps.get_version.outputs.match }}

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 15
        uses: actions/setup-java@v1
        with:
          java-version: 15

      - name: Grant execute permission for gradlew
        run: |
          chmod +x gradlew

      - name: Get version
        if: github.ref == 'refs/heads/main'
        id: get_version
        uses: rnett/find-regex@v1.2
        with:
          regex: '\s*version ?(?:=|:) ?"?([\w.\-_]+)"?'
          files: "build.gradle.kts,common.gradle.kts,gradle.properties,build.gradle"
          commands: "./gradlew properties"
      - name: Print version
        run: 'echo "Version: ${{ steps.get_version.outputs.match }}"'

  create_staging_repository:
    runs-on: ubuntu-latest
    needs: [ find-version, test ]
    name: Create staging repository
    outputs:
      repository_id: ${{ steps.create.outputs.repository_id }}
    steps:
      - name: Print version
        run: |
          echo "Snapshot string: ${{ needs.find-version.outputs.snapshot }}"
          echo "Is release: ${{ needs.find-version.outputs.snapshot == 'false' }}"
      - id: create
        if: needs.find-version.outputs.snapshot == 'false'
        uses: nexus-actions/create-nexus-staging-repo@v1.1
        with:
          username: rnett
          password: ${{ secrets.SONATYPE_PASSWORD }}
          staging_profile_id: ${{ secrets.SONATYPE_PROFILE_ID }}
          description: ${{ github.repository }}/${{ github.workflow }}#${{ github.run_number }} - ${{ needs.find-version.outputs.version }}

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: [ create_staging_repository, find-version ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 15
        uses: actions/setup-java@v1
        with:
          java-version: 15
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-publish-gradle-${{ hashFiles('**/settings.gradle*', 'buildSrc/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-publish-gradle-
            ${{ runner.os }}-test-gradle-

      - name: Clone past docs for release
        if: needs.find-version.outputs.snapshot == 'false'
        run: |
          git fetch
          git clone --depth 1 https://github.com/rnett/kotlin-js-action.git --branch gh-pages --single-branch past-docs
          mkdir -p past-docs/old-releases/

      - name: Remove current docs from old docs
        run: |
          rm -rf past-docs/old-releases/${{ needs.find-version.outputs.version }}
          rm -rf past-docs/old-releases/*/older

      - name: List old versions
        if: needs.find-version.outputs.snapshot == 'false'
        run: ls -l past-docs/old-releases

      - name: Publish
        if: github.ref == 'refs/heads/main'
        env:
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_PASSWORD }}
          ORG_GRADLE_PROJECT_mavenCentralUsername: rnett
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.OSSRH_GPG_SECRET_KEY }}
          ORG_GRADLE_PROJECT_sonatypeRepositoryId: ${{ needs.create_staging_repository.outputs.repository_id }}
          GRADLE_OPTS: -Xmx2048m -XX:MaxPermSize=512m
        run: ./gradlew publish

      - name: Generate HTML Docs
        run: ./gradlew dokkaHtmlMultiModule -PsourceLinkBranch=$GITHUB_SHA -PoldVersionsDir=past-docs/old-releases

      - name: Generate publishable readme
        run: ./gradlew generateReadme

      - name: Stop gradle daemon
        run: ./gradlew --stop

      - name: Publish docs
        if: github.ref == 'refs/heads/main'
        uses: rnett/publish-docs@v2.6
        with:
          from: ./build/dokka/htmlMultiModule
          publish-to: $latest,!old-releases/$version
          version: ${{ needs.find-version.outputs.version }}

      - name: Publish README
        uses: rnett/publish-docs@v2.6
        with:
          from-file: ./build/README.md
          publish-to: '$latest,!.'
          version: ${{ needs.find-version.outputs.version }}
          restore: true
          message: Update README for $version

      - name: Cleanup Gradle Cache
        run: |
          rm -f ~/.gradle/caches/*/*.lock
          rm -f ~/.gradle/caches/*/gc.properties

  finalize:
    runs-on: ubuntu-latest
    needs: [ create_staging_repository, find-version, publish ]
    if: ${{ always() && needs.create_staging_repository.result == 'success' && needs.find-version.outputs.snapshot == 'false' }}
    steps:
      - name: Discard
        if: ${{ needs.publish.result != 'success' }}
        uses: nexus-actions/drop-nexus-staging-repo@v1
        with:
          username: rnett
          password: ${{ secrets.SONATYPE_PASSWORD }}
          staging_repository_id: ${{ needs.create_staging_repository.outputs.repository_id }}
      - name: Release
        if: ${{ needs.publish.result == 'success' }}
        uses: nexus-actions/release-nexus-staging-repo@v1.2
        with:
          username: rnett
          password: ${{ secrets.SONATYPE_PASSWORD }}
          staging_repository_id: ${{ needs.create_staging_repository.outputs.repository_id }}
          description: Closed ${{ github.repository }}/${{ github.workflow }}#${{ github.run_number }} - ${{ needs.find-version.outputs.version }}
          close_only: 'true'
